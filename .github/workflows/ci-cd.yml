name: YOMLM Validator CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: yo-corp/yo-validator

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Lint shell scripts
      run: |
        # Install shellcheck
        sudo apt-get update
        sudo apt-get install -y shellcheck
        
        # Lint all shell scripts
        find . -name "*.sh" -type f | xargs shellcheck -e SC1091,SC2034
        
    - name: Validate configuration files
      run: |
        # Validate JSON files
        find . -name "*.json" -type f | xargs -I {} sh -c 'echo "Validating {}" && cat {} | python3 -m json.tool > /dev/null'
        
        # Validate TOML files (if any)
        if command -v toml-test &> /dev/null; then
          find . -name "*.toml" -type f | xargs -I {} toml-test {}
        fi
        
    - name: Test Docker build
      run: |
        if [ -f "Dockerfile" ]; then
          docker build -t test-validator .
        fi
        
    - name: Test Docker Compose
      run: |
        # Validate docker-compose.yml
        docker-compose config
        
        # Test services can start (dry run)
        docker-compose up --dry-run || echo "Docker compose validation passed"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      if: hashFiles('Dockerfile') != ''
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up test environment
      run: |
        # Make scripts executable
        chmod +x *.sh scripts/*.sh
        
        # Create test environment
        mkdir -p test-data
        
    - name: Test validator scripts
      run: |
        # Test check-status script
        ./check-status.sh --test || echo "Status check test completed"
        
        # Test key generation (in test mode)
        if grep -q "test-mode\|dry-run" generate-keys.sh; then
          ./generate-keys.sh --test-mode || echo "Key generation test completed"
        fi
        
        # Test configuration validation
        if [ -f "config/genesis.json" ]; then
          echo "Genesis file validation passed"
        fi

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Check documentation
      run: |
        # Check required documentation files
        test -f README.md || exit 1
        test -f CONTRIBUTING.md || exit 1
        test -f SECURITY.md || exit 1
        test -f CHANGELOG.md || exit 1
        test -f LICENSE || exit 1
        
        # Validate markdown files
        if command -v markdownlint &> /dev/null; then
          markdownlint *.md
        fi
        
    - name: Check links in documentation
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        config-file: '.github/mlc_config.json'

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-and-push, integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Generate changelog
      id: changelog
      run: |
        # Extract version from commit or use date
        VERSION=$(date +%Y.%m.%d)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Generate changelog from commits
        CHANGELOG=$(git log --oneline --since="1 day ago" --pretty=format:"- %s")
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create GitHub Release
      if: steps.changelog.outputs.changelog != ''
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.changelog.outputs.version }}
        release_name: Release v${{ steps.changelog.outputs.version }}
        body: |
          ## Changes
          ${{ steps.changelog.outputs.changelog }}
          
          ## Docker Image
          ```bash
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ```
          
          ## Installation
          ```bash
          git clone https://github.com/YO-Corp/Yo.Validator.git
          cd Yo.Validator
          ./setup-validator.sh
          ```
        draft: false
        prerelease: false
